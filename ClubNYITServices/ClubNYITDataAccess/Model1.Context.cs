//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClubNYITDataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CSIVangaurd_DevEntities : DbContext
    {
        public CSIVangaurd_DevEntities()
            : base("name=CSIVangaurd_DevEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompanyAppImage> CompanyAppImages { get; set; }
        public virtual DbSet<CompanyAppInfo> CompanyAppInfoes { get; set; }
        public virtual DbSet<CompanyTheme> CompanyThemes { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Site> Sites { get; set; }
        public virtual DbSet<SiteAppThemeType> SiteAppThemeTypes { get; set; }
        public virtual DbSet<SiteTheme> SiteThemes { get; set; }
        public virtual DbSet<UIControl> UIControls { get; set; }
        public virtual DbSet<UIControlPropertyCategory> UIControlPropertyCategories { get; set; }
        public virtual DbSet<UIProperty> UIProperties { get; set; }
        public virtual DbSet<UIPropertyCategory> UIPropertyCategories { get; set; }
        public virtual DbSet<UIPropertyPropertyCategory> UIPropertyPropertyCategories { get; set; }
        public virtual DbSet<UITheme> UIThemes { get; set; }
        public virtual DbSet<UIThemePopertyColor> UIThemePopertyColors { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Authentication> Authentications { get; set; }
    
        public virtual int uspAddAppImages(string companyID, Nullable<int> lvAppID, Nullable<int> createdBy, Nullable<System.DateTime> lvCreatedDateTime)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var lvAppIDParameter = lvAppID.HasValue ?
                new ObjectParameter("lvAppID", lvAppID) :
                new ObjectParameter("lvAppID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var lvCreatedDateTimeParameter = lvCreatedDateTime.HasValue ?
                new ObjectParameter("lvCreatedDateTime", lvCreatedDateTime) :
                new ObjectParameter("lvCreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddAppImages", companyIDParameter, lvAppIDParameter, createdByParameter, lvCreatedDateTimeParameter);
        }
    
        public virtual int uspAddAppInfo(string companyID, Nullable<int> lvAppID, string companyAppName, string companyAppDescription, string companyAppRetinaIconURL, string companyAppNonRetinaIconURL, string iconColor, string retinaSplashScreenURL, string nonRetinaSplashScreenURL, Nullable<int> createdBy, Nullable<System.DateTime> lvCreatedDateTime, ObjectParameter createdCompanyAppName)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var lvAppIDParameter = lvAppID.HasValue ?
                new ObjectParameter("lvAppID", lvAppID) :
                new ObjectParameter("lvAppID", typeof(int));
    
            var companyAppNameParameter = companyAppName != null ?
                new ObjectParameter("CompanyAppName", companyAppName) :
                new ObjectParameter("CompanyAppName", typeof(string));
    
            var companyAppDescriptionParameter = companyAppDescription != null ?
                new ObjectParameter("CompanyAppDescription", companyAppDescription) :
                new ObjectParameter("CompanyAppDescription", typeof(string));
    
            var companyAppRetinaIconURLParameter = companyAppRetinaIconURL != null ?
                new ObjectParameter("CompanyAppRetinaIconURL", companyAppRetinaIconURL) :
                new ObjectParameter("CompanyAppRetinaIconURL", typeof(string));
    
            var companyAppNonRetinaIconURLParameter = companyAppNonRetinaIconURL != null ?
                new ObjectParameter("CompanyAppNonRetinaIconURL", companyAppNonRetinaIconURL) :
                new ObjectParameter("CompanyAppNonRetinaIconURL", typeof(string));
    
            var iconColorParameter = iconColor != null ?
                new ObjectParameter("IconColor", iconColor) :
                new ObjectParameter("IconColor", typeof(string));
    
            var retinaSplashScreenURLParameter = retinaSplashScreenURL != null ?
                new ObjectParameter("RetinaSplashScreenURL", retinaSplashScreenURL) :
                new ObjectParameter("RetinaSplashScreenURL", typeof(string));
    
            var nonRetinaSplashScreenURLParameter = nonRetinaSplashScreenURL != null ?
                new ObjectParameter("NonRetinaSplashScreenURL", nonRetinaSplashScreenURL) :
                new ObjectParameter("NonRetinaSplashScreenURL", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var lvCreatedDateTimeParameter = lvCreatedDateTime.HasValue ?
                new ObjectParameter("lvCreatedDateTime", lvCreatedDateTime) :
                new ObjectParameter("lvCreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddAppInfo", companyIDParameter, lvAppIDParameter, companyAppNameParameter, companyAppDescriptionParameter, companyAppRetinaIconURLParameter, companyAppNonRetinaIconURLParameter, iconColorParameter, retinaSplashScreenURLParameter, nonRetinaSplashScreenURLParameter, createdByParameter, lvCreatedDateTimeParameter, createdCompanyAppName);
        }
    
        public virtual int uspAddAuthentication(string userName, string authToken, ObjectParameter addedAuthToken)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var authTokenParameter = authToken != null ?
                new ObjectParameter("AuthToken", authToken) :
                new ObjectParameter("AuthToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddAuthentication", userNameParameter, authTokenParameter, addedAuthToken);
        }
    
        public virtual int uspAddCompany(string companyID, string companyName, string forgotUserNameURL, string forgotPasswordURL, string feedBackEmailId, string aPIKey, string dataSourceURL, Nullable<int> createdBy, Nullable<System.DateTime> lvCreatedDateTime, ObjectParameter createdCompanyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var forgotUserNameURLParameter = forgotUserNameURL != null ?
                new ObjectParameter("ForgotUserNameURL", forgotUserNameURL) :
                new ObjectParameter("ForgotUserNameURL", typeof(string));
    
            var forgotPasswordURLParameter = forgotPasswordURL != null ?
                new ObjectParameter("ForgotPasswordURL", forgotPasswordURL) :
                new ObjectParameter("ForgotPasswordURL", typeof(string));
    
            var feedBackEmailIdParameter = feedBackEmailId != null ?
                new ObjectParameter("FeedBackEmailId", feedBackEmailId) :
                new ObjectParameter("FeedBackEmailId", typeof(string));
    
            var aPIKeyParameter = aPIKey != null ?
                new ObjectParameter("APIKey", aPIKey) :
                new ObjectParameter("APIKey", typeof(string));
    
            var dataSourceURLParameter = dataSourceURL != null ?
                new ObjectParameter("DataSourceURL", dataSourceURL) :
                new ObjectParameter("DataSourceURL", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var lvCreatedDateTimeParameter = lvCreatedDateTime.HasValue ?
                new ObjectParameter("lvCreatedDateTime", lvCreatedDateTime) :
                new ObjectParameter("lvCreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddCompany", companyIDParameter, companyNameParameter, forgotUserNameURLParameter, forgotPasswordURLParameter, feedBackEmailIdParameter, aPIKeyParameter, dataSourceURLParameter, createdByParameter, lvCreatedDateTimeParameter, createdCompanyID);
        }
    
        public virtual int uspAddCompanyTheme(string companyID, Nullable<int> lvAppID, Nullable<int> createdUIThemeID, Nullable<int> createdBy, Nullable<System.DateTime> lvCreatedDateTime)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var lvAppIDParameter = lvAppID.HasValue ?
                new ObjectParameter("lvAppID", lvAppID) :
                new ObjectParameter("lvAppID", typeof(int));
    
            var createdUIThemeIDParameter = createdUIThemeID.HasValue ?
                new ObjectParameter("CreatedUIThemeID", createdUIThemeID) :
                new ObjectParameter("CreatedUIThemeID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var lvCreatedDateTimeParameter = lvCreatedDateTime.HasValue ?
                new ObjectParameter("lvCreatedDateTime", lvCreatedDateTime) :
                new ObjectParameter("lvCreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddCompanyTheme", companyIDParameter, lvAppIDParameter, createdUIThemeIDParameter, createdByParameter, lvCreatedDateTimeParameter);
        }
    
        public virtual int uspAddSite(string companyID, Nullable<int> createdBy, Nullable<System.DateTime> lvCreatedDateTime)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var lvCreatedDateTimeParameter = lvCreatedDateTime.HasValue ?
                new ObjectParameter("lvCreatedDateTime", lvCreatedDateTime) :
                new ObjectParameter("lvCreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddSite", companyIDParameter, createdByParameter, lvCreatedDateTimeParameter);
        }
    
        public virtual int uspAddSiteAppThemeType(string companyID, Nullable<int> createdBy, Nullable<System.DateTime> lvCreatedDateTime)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var lvCreatedDateTimeParameter = lvCreatedDateTime.HasValue ?
                new ObjectParameter("lvCreatedDateTime", lvCreatedDateTime) :
                new ObjectParameter("lvCreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddSiteAppThemeType", companyIDParameter, createdByParameter, lvCreatedDateTimeParameter);
        }
    
        public virtual int uspAddSiteTheme(string companyID, Nullable<int> siteID, Nullable<int> lvAppID, Nullable<int> createdUIThemeID, Nullable<int> createdBy, Nullable<System.DateTime> lvCreatedDateTime)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var lvAppIDParameter = lvAppID.HasValue ?
                new ObjectParameter("lvAppID", lvAppID) :
                new ObjectParameter("lvAppID", typeof(int));
    
            var createdUIThemeIDParameter = createdUIThemeID.HasValue ?
                new ObjectParameter("CreatedUIThemeID", createdUIThemeID) :
                new ObjectParameter("CreatedUIThemeID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var lvCreatedDateTimeParameter = lvCreatedDateTime.HasValue ?
                new ObjectParameter("lvCreatedDateTime", lvCreatedDateTime) :
                new ObjectParameter("lvCreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddSiteTheme", companyIDParameter, siteIDParameter, lvAppIDParameter, createdUIThemeIDParameter, createdByParameter, lvCreatedDateTimeParameter);
        }
    
        public virtual int uspAddUITheme(string uIThemeName, string retinaBackgroundImageURL, string nonRetinaBackgroundImageURL, Nullable<int> createdBy, Nullable<System.DateTime> lvCreatedDateTime)
        {
            var uIThemeNameParameter = uIThemeName != null ?
                new ObjectParameter("UIThemeName", uIThemeName) :
                new ObjectParameter("UIThemeName", typeof(string));
    
            var retinaBackgroundImageURLParameter = retinaBackgroundImageURL != null ?
                new ObjectParameter("RetinaBackgroundImageURL", retinaBackgroundImageURL) :
                new ObjectParameter("RetinaBackgroundImageURL", typeof(string));
    
            var nonRetinaBackgroundImageURLParameter = nonRetinaBackgroundImageURL != null ?
                new ObjectParameter("NonRetinaBackgroundImageURL", nonRetinaBackgroundImageURL) :
                new ObjectParameter("NonRetinaBackgroundImageURL", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var lvCreatedDateTimeParameter = lvCreatedDateTime.HasValue ?
                new ObjectParameter("lvCreatedDateTime", lvCreatedDateTime) :
                new ObjectParameter("lvCreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddUITheme", uIThemeNameParameter, retinaBackgroundImageURLParameter, nonRetinaBackgroundImageURLParameter, createdByParameter, lvCreatedDateTimeParameter);
        }
    
        public virtual int uspAddUIThemePopertyColor(Nullable<int> createdUIThemeID, Nullable<int> lvAppID, Nullable<int> createdBy, Nullable<System.DateTime> lvCreatedDateTime)
        {
            var createdUIThemeIDParameter = createdUIThemeID.HasValue ?
                new ObjectParameter("CreatedUIThemeID", createdUIThemeID) :
                new ObjectParameter("CreatedUIThemeID", typeof(int));
    
            var lvAppIDParameter = lvAppID.HasValue ?
                new ObjectParameter("lvAppID", lvAppID) :
                new ObjectParameter("lvAppID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var lvCreatedDateTimeParameter = lvCreatedDateTime.HasValue ?
                new ObjectParameter("lvCreatedDateTime", lvCreatedDateTime) :
                new ObjectParameter("lvCreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddUIThemePopertyColor", createdUIThemeIDParameter, lvAppIDParameter, createdByParameter, lvCreatedDateTimeParameter);
        }
    
        public virtual int uspAddUser(string userName, string companyID, Nullable<int> roleID, string emailId, string password, Nullable<int> createdBy, Nullable<System.DateTime> lvCreatedDateTime, ObjectParameter userID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var lvCreatedDateTimeParameter = lvCreatedDateTime.HasValue ?
                new ObjectParameter("lvCreatedDateTime", lvCreatedDateTime) :
                new ObjectParameter("lvCreatedDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddUser", userNameParameter, companyIDParameter, roleIDParameter, emailIdParameter, passwordParameter, createdByParameter, lvCreatedDateTimeParameter, userID);
        }
    
        public virtual int uspDeleteAuthentication(string authToken, ObjectParameter isDeleted)
        {
            var authTokenParameter = authToken != null ?
                new ObjectParameter("AuthToken", authToken) :
                new ObjectParameter("AuthToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteAuthentication", authTokenParameter, isDeleted);
        }
    
        public virtual int uspDeleteCompany(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteCompany", companyIDParameter);
        }
    
        public virtual ObjectResult<uspGetAllAppType_Result> uspGetAllAppType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllAppType_Result>("uspGetAllAppType");
        }
    
        public virtual ObjectResult<uspGetAllSiteThemeType_Result> uspGetAllSiteThemeType(string companyID, string appType)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllSiteThemeType_Result>("uspGetAllSiteThemeType", companyIDParameter, appTypeParameter);
        }
    
        public virtual ObjectResult<uspGetAllUIPropertyCategory_Result> uspGetAllUIPropertyCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllUIPropertyCategory_Result>("uspGetAllUIPropertyCategory");
        }
    
        public virtual ObjectResult<uspGetAppConfig_Result> uspGetAppConfig(string companyID, string appType)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAppConfig_Result>("uspGetAppConfig", companyIDParameter, appTypeParameter);
        }
    
        public virtual int uspGetAuthenticationDetails(string authToken, ObjectParameter userName)
        {
            var authTokenParameter = authToken != null ?
                new ObjectParameter("AuthToken", authToken) :
                new ObjectParameter("AuthToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetAuthenticationDetails", authTokenParameter, userName);
        }
    
        public virtual ObjectResult<uspGetCompanyBrandConfigDetails_Result> uspGetCompanyBrandConfigDetails(string companyID, string appType)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCompanyBrandConfigDetails_Result>("uspGetCompanyBrandConfigDetails", companyIDParameter, appTypeParameter);
        }
    
        public virtual ObjectResult<uspGetCompanyDetails_Result> uspGetCompanyDetails(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCompanyDetails_Result>("uspGetCompanyDetails", companyIDParameter);
        }
    
        public virtual int uspGetCompanyThemeDetails1(Nullable<int> companyID, string appType)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetCompanyThemeDetails1", companyIDParameter, appTypeParameter);
        }
    
        public virtual ObjectResult<uspGetCompanyThemes_Result> uspGetCompanyThemes(string companyID, string appType)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCompanyThemes_Result>("uspGetCompanyThemes", companyIDParameter, appTypeParameter);
        }
    
        public virtual ObjectResult<uspGetCompanyUIPropertyColor_Result> uspGetCompanyUIPropertyColor(Nullable<int> uIPropertyCategoryID, string companyID, string appType)
        {
            var uIPropertyCategoryIDParameter = uIPropertyCategoryID.HasValue ?
                new ObjectParameter("UIPropertyCategoryID", uIPropertyCategoryID) :
                new ObjectParameter("UIPropertyCategoryID", typeof(int));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetCompanyUIPropertyColor_Result>("uspGetCompanyUIPropertyColor", uIPropertyCategoryIDParameter, companyIDParameter, appTypeParameter);
        }
    
        public virtual ObjectResult<uspGetSiteBrandConfigDetails_Result> uspGetSiteBrandConfigDetails(string companyID, Nullable<int> siteID, string appType)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSiteBrandConfigDetails_Result>("uspGetSiteBrandConfigDetails", companyIDParameter, siteIDParameter, appTypeParameter);
        }
    
        public virtual ObjectResult<uspGetSiteThemes_Result> uspGetSiteThemes(string companyID, Nullable<int> siteID, string appType)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSiteThemes_Result>("uspGetSiteThemes", companyIDParameter, siteIDParameter, appTypeParameter);
        }
    
        public virtual ObjectResult<uspGetSiteUIPropertyColor_Result> uspGetSiteUIPropertyColor(Nullable<int> uIPropertyCategoryID, Nullable<int> siteID, string companyID, string appType)
        {
            var uIPropertyCategoryIDParameter = uIPropertyCategoryID.HasValue ?
                new ObjectParameter("UIPropertyCategoryID", uIPropertyCategoryID) :
                new ObjectParameter("UIPropertyCategoryID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSiteUIPropertyColor_Result>("uspGetSiteUIPropertyColor", uIPropertyCategoryIDParameter, siteIDParameter, companyIDParameter, appTypeParameter);
        }
    
        public virtual int uspGetThemeDetails(Nullable<long> uIThemeID)
        {
            var uIThemeIDParameter = uIThemeID.HasValue ?
                new ObjectParameter("UIThemeID", uIThemeID) :
                new ObjectParameter("UIThemeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetThemeDetails", uIThemeIDParameter);
        }
    
        public virtual ObjectResult<uspGetUIControl_Result> uspGetUIControl(Nullable<int> uIPropertyCategoryID)
        {
            var uIPropertyCategoryIDParameter = uIPropertyCategoryID.HasValue ?
                new ObjectParameter("UIPropertyCategoryID", uIPropertyCategoryID) :
                new ObjectParameter("UIPropertyCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUIControl_Result>("uspGetUIControl", uIPropertyCategoryIDParameter);
        }
    
        public virtual ObjectResult<uspGetUserDetails_Result> uspGetUserDetails(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserDetails_Result>("uspGetUserDetails", userNameParameter);
        }
    
        public virtual ObjectResult<uspPagedCompanies_Result> uspPagedCompanies(Nullable<short> startIndex, Nullable<short> noOfRows)
        {
            var startIndexParameter = startIndex.HasValue ?
                new ObjectParameter("StartIndex", startIndex) :
                new ObjectParameter("StartIndex", typeof(short));
    
            var noOfRowsParameter = noOfRows.HasValue ?
                new ObjectParameter("NoOfRows", noOfRows) :
                new ObjectParameter("NoOfRows", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspPagedCompanies_Result>("uspPagedCompanies", startIndexParameter, noOfRowsParameter);
        }
    
        public virtual int uspRegisterCompanyUser(string companyID, string companyName, string forgotUserNameURL, string forgotPasswordURL, string feedBackEmailId, string aPIKey, string dataSourceURL, Nullable<int> createdBy, string userName, string password, string emailId, Nullable<int> roleID, ObjectParameter createdCompanyID, ObjectParameter userID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var forgotUserNameURLParameter = forgotUserNameURL != null ?
                new ObjectParameter("ForgotUserNameURL", forgotUserNameURL) :
                new ObjectParameter("ForgotUserNameURL", typeof(string));
    
            var forgotPasswordURLParameter = forgotPasswordURL != null ?
                new ObjectParameter("ForgotPasswordURL", forgotPasswordURL) :
                new ObjectParameter("ForgotPasswordURL", typeof(string));
    
            var feedBackEmailIdParameter = feedBackEmailId != null ?
                new ObjectParameter("FeedBackEmailId", feedBackEmailId) :
                new ObjectParameter("FeedBackEmailId", typeof(string));
    
            var aPIKeyParameter = aPIKey != null ?
                new ObjectParameter("APIKey", aPIKey) :
                new ObjectParameter("APIKey", typeof(string));
    
            var dataSourceURLParameter = dataSourceURL != null ?
                new ObjectParameter("DataSourceURL", dataSourceURL) :
                new ObjectParameter("DataSourceURL", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRegisterCompanyUser", companyIDParameter, companyNameParameter, forgotUserNameURLParameter, forgotPasswordURLParameter, feedBackEmailIdParameter, aPIKeyParameter, dataSourceURLParameter, createdByParameter, userNameParameter, passwordParameter, emailIdParameter, roleIDParameter, createdCompanyID, userID);
        }
    
        public virtual int uspRegisterCompanyUser2(string companyID, string companyName, string forgotUserNameURL, string forgotPasswordURL, string feedBackEmailId, string aPIKey, string dataSourceURL, Nullable<int> createdBy, string userName, string password, string emailId, Nullable<int> roleID, ObjectParameter createdCompanyID, ObjectParameter userID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var forgotUserNameURLParameter = forgotUserNameURL != null ?
                new ObjectParameter("ForgotUserNameURL", forgotUserNameURL) :
                new ObjectParameter("ForgotUserNameURL", typeof(string));
    
            var forgotPasswordURLParameter = forgotPasswordURL != null ?
                new ObjectParameter("ForgotPasswordURL", forgotPasswordURL) :
                new ObjectParameter("ForgotPasswordURL", typeof(string));
    
            var feedBackEmailIdParameter = feedBackEmailId != null ?
                new ObjectParameter("FeedBackEmailId", feedBackEmailId) :
                new ObjectParameter("FeedBackEmailId", typeof(string));
    
            var aPIKeyParameter = aPIKey != null ?
                new ObjectParameter("APIKey", aPIKey) :
                new ObjectParameter("APIKey", typeof(string));
    
            var dataSourceURLParameter = dataSourceURL != null ?
                new ObjectParameter("DataSourceURL", dataSourceURL) :
                new ObjectParameter("DataSourceURL", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRegisterCompanyUser2", companyIDParameter, companyNameParameter, forgotUserNameURLParameter, forgotPasswordURLParameter, feedBackEmailIdParameter, aPIKeyParameter, dataSourceURLParameter, createdByParameter, userNameParameter, passwordParameter, emailIdParameter, roleIDParameter, createdCompanyID, userID);
        }
    
        public virtual int uspSaveAppConfig(string companyID, string appType, string companyAppName, string companyAppDescription, string companyAppRetinaIconURL, string companyAppNonRetinaIconURL, string iconColor, string retinaSplashScreenURL, string nonRetinaSplashScreenURL, Nullable<int> createdBy, ObjectParameter createdCompanyAppName)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            var companyAppNameParameter = companyAppName != null ?
                new ObjectParameter("CompanyAppName", companyAppName) :
                new ObjectParameter("CompanyAppName", typeof(string));
    
            var companyAppDescriptionParameter = companyAppDescription != null ?
                new ObjectParameter("CompanyAppDescription", companyAppDescription) :
                new ObjectParameter("CompanyAppDescription", typeof(string));
    
            var companyAppRetinaIconURLParameter = companyAppRetinaIconURL != null ?
                new ObjectParameter("CompanyAppRetinaIconURL", companyAppRetinaIconURL) :
                new ObjectParameter("CompanyAppRetinaIconURL", typeof(string));
    
            var companyAppNonRetinaIconURLParameter = companyAppNonRetinaIconURL != null ?
                new ObjectParameter("CompanyAppNonRetinaIconURL", companyAppNonRetinaIconURL) :
                new ObjectParameter("CompanyAppNonRetinaIconURL", typeof(string));
    
            var iconColorParameter = iconColor != null ?
                new ObjectParameter("IconColor", iconColor) :
                new ObjectParameter("IconColor", typeof(string));
    
            var retinaSplashScreenURLParameter = retinaSplashScreenURL != null ?
                new ObjectParameter("RetinaSplashScreenURL", retinaSplashScreenURL) :
                new ObjectParameter("RetinaSplashScreenURL", typeof(string));
    
            var nonRetinaSplashScreenURLParameter = nonRetinaSplashScreenURL != null ?
                new ObjectParameter("NonRetinaSplashScreenURL", nonRetinaSplashScreenURL) :
                new ObjectParameter("NonRetinaSplashScreenURL", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveAppConfig", companyIDParameter, appTypeParameter, companyAppNameParameter, companyAppDescriptionParameter, companyAppRetinaIconURLParameter, companyAppNonRetinaIconURLParameter, iconColorParameter, retinaSplashScreenURLParameter, nonRetinaSplashScreenURLParameter, createdByParameter, createdCompanyAppName);
        }
    
        public virtual int uspSaveCompanyBrandConfig(string companyID, string appType, string retinaBackgroundImageURL, string nonRetinaBackgroundImageURL, Nullable<int> createdBy, ObjectParameter uIThemeID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            var retinaBackgroundImageURLParameter = retinaBackgroundImageURL != null ?
                new ObjectParameter("RetinaBackgroundImageURL", retinaBackgroundImageURL) :
                new ObjectParameter("RetinaBackgroundImageURL", typeof(string));
    
            var nonRetinaBackgroundImageURLParameter = nonRetinaBackgroundImageURL != null ?
                new ObjectParameter("NonRetinaBackgroundImageURL", nonRetinaBackgroundImageURL) :
                new ObjectParameter("NonRetinaBackgroundImageURL", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveCompanyBrandConfig", companyIDParameter, appTypeParameter, retinaBackgroundImageURLParameter, nonRetinaBackgroundImageURLParameter, createdByParameter, uIThemeID);
        }
    
        public virtual int uspSaveSiteBrandConfig(string companyID, Nullable<int> siteID, string appType, string retinaBackgroundImageURL, string nonRetinaBackgroundImageURL, Nullable<int> createdBy, ObjectParameter uIThemeID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(string));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var appTypeParameter = appType != null ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(string));
    
            var retinaBackgroundImageURLParameter = retinaBackgroundImageURL != null ?
                new ObjectParameter("RetinaBackgroundImageURL", retinaBackgroundImageURL) :
                new ObjectParameter("RetinaBackgroundImageURL", typeof(string));
    
            var nonRetinaBackgroundImageURLParameter = nonRetinaBackgroundImageURL != null ?
                new ObjectParameter("NonRetinaBackgroundImageURL", nonRetinaBackgroundImageURL) :
                new ObjectParameter("NonRetinaBackgroundImageURL", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveSiteBrandConfig", companyIDParameter, siteIDParameter, appTypeParameter, retinaBackgroundImageURLParameter, nonRetinaBackgroundImageURLParameter, createdByParameter, uIThemeID);
        }
    }
}
